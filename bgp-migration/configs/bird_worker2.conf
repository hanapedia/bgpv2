router id 10.0.3.2;  # Any stable IP; often the node's PodCIDR gateway or host IP

log syslog all;

protocol device {
  scan time 60;
}

protocol kernel {
  persist;
  merge paths;

  ipv4 {
    import all;
    export filter {
      if source = RTS_DEVICE then reject;

      # ignore cilium PodCIDR as the route that directs to cilium_host will be imported from the kernel.
      if (65000,99) ~ bgp_community && bgp_next_hop = 127.0.0.1 then reject;
      # do not export cilium service routes into kernel
      if (65000,100) ~ bgp_community then reject;
      if (65000,200) ~ bgp_community then reject;
      if (65000,300) ~ bgp_community then reject;
      accept;
    };
  };
}

ipv4 table coiltab;
protocol kernel 'coil' {
    kernel table 119;  # coil exports
    learn;
    scan time 1;
    ipv4 {
        table coiltab;
        import all;
        export none;
    };
}
protocol pipe {
    table master4;
    peer table coiltab;
    import all;
    export none;
}

protocol direct direct1 {
  ipv4;
  interface "net0", "cilium_host";
}

protocol direct direct_docker {
  ipv4;
  interface "eth0";
}

# Listen passively for local connection from cilium-agent's GoBGP
protocol bgp cilium_agent {
  local as 65001;
  neighbor 127.0.0.1 as 65002;
  passive;  # BIRD waits for Cilium agent to initiate the connection
  multihop;

  ipv4 {
    import filter { # Accept all routes Cilium exports
      print "importing route: ", net, ", ", from, ", ", proto, ", ", bgp_next_hop;
      accept;
    };
    export none;    # Forward those to the router session below
  };
}

# Peer with external router
protocol bgp upstream_router {
  local as 65001;
  neighbor 10.0.3.1 as 65001;
  direct;

  ipv4 {
    next hop self;

    import filter {
      if (65000,100) ~ bgp_community then reject;
      if (65000,200) ~ bgp_community then reject;
      if (65000,300) ~ bgp_community then reject;
      print "importing route: ", net, ", ", from, ", ", proto, ", ", bgp_next_hop;
      accept;
    };
    # Learn any routes from upstream if needed
    export filter {
      if proto = "direct1" then reject;
      if proto = "direct_docker" then reject;
      if (65000,100) ~ bgp_community then reject;
      if (65000,200) ~ bgp_community then reject;
      print "exporting route: ", net, ", ", from, ", ", proto, ", ", bgp_next_hop;
      accept;
    };
  };
}
